using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Numerics;
 
namespace CardWars
{
    class Program
    {
        static void Main()
        {
            int numberOfGames = int.Parse(Console.ReadLine());
            int firstPlayerScore = 0;
            int secondPlayerScore = 0;
            short firstPlayerGamesWon = 0;
            short secondPlayerGamesWon = 0;
            BigInteger firstPlayerOverall = 0;
            BigInteger secondPlayerOverall = 0;
            List<string> firstPlayerCards = new List<string>();
            List<string> secondPlayerCards = new List<string>();
            int count = 0;
            for (int i = 0; i < numberOfGames; i++)
            {
                firstPlayerCards.Add(Console.ReadLine());
                firstPlayerCards.Add(Console.ReadLine());
                firstPlayerCards.Add(Console.ReadLine());
                secondPlayerCards.Add(Console.ReadLine());
                secondPlayerCards.Add(Console.ReadLine());
                secondPlayerCards.Add(Console.ReadLine());
 
                bool firstContains;
                bool secondContains;
                string X = "X";
                firstContains = firstPlayerCards.Contains(X);
                secondContains = secondPlayerCards.Contains(X);
 
                if (firstContains == true && secondContains == false)
                {
                    Console.WriteLine("X card drawn! Player one wins the match!");
                    goto Finish;
                }
                else if (firstContains == false && secondContains == true)
                {
                    Console.WriteLine("X card drawn! Player two wins the match!");
                    goto Finish;
                }
                else
                {
                    bool xUsed1 = false;
                    bool xUsed2 = false;
                    for (int j = count; j < count + 3; j++)
                    {
                        switch (firstPlayerCards[j])
                        {
                            case "2": firstPlayerScore += 10; break;
                            case "3": firstPlayerScore += 9; break;
                            case "4": firstPlayerScore += 8; break;
                            case "5": firstPlayerScore += 7; break;
                            case "6": firstPlayerScore += 6; break;
                            case "7": firstPlayerScore += 5; break;
                            case "8": firstPlayerScore += 4; break;
                            case "9": firstPlayerScore += 3; break;
                            case "10": firstPlayerScore += 2; break;
                            case "A": firstPlayerScore += 1; break;
                            case "J": firstPlayerScore += 11; break;
                            case "Q": firstPlayerScore += 12; break;
                            case "K": firstPlayerScore += 13; break;
                            case "Z": firstPlayerOverall *= 2; break;
                            case "Y": firstPlayerOverall -= 200; break;
                            case "X": xUsed1 = true; break;
                        }
                        switch (secondPlayerCards[j])
                        {
                            case "2": secondPlayerScore += 10; break;
                            case "3": secondPlayerScore += 9; break;
                            case "4": secondPlayerScore += 8; break;
                            case "5": secondPlayerScore += 7; break;
                            case "6": secondPlayerScore += 6; break;
                            case "7": secondPlayerScore += 5; break;
                            case "8": secondPlayerScore += 4; break;
                            case "9": secondPlayerScore += 3; break;
                            case "10": secondPlayerScore += 2; break;
                            case "A": secondPlayerScore += 1; break;
                            case "J": secondPlayerScore += 11; break;
                            case "Q": secondPlayerScore += 12; break;
                            case "K": secondPlayerScore += 13; break;
                            case "Z": secondPlayerOverall *= 2; break;
                            case "Y": secondPlayerOverall -= 200; break;
                            case "X": xUsed2 = true; break;
                        }
                    }
                    if (xUsed1 & xUsed2)
                    {
                        firstPlayerOverall += 50;
                        secondPlayerOverall += 50;
                    }
                if (firstPlayerScore > secondPlayerScore)
                {
                    secondPlayerScore = 0;
                    firstPlayerGamesWon++;
                }
                else if (firstPlayerScore < secondPlayerScore)
                {
                    firstPlayerScore = 0;
                    secondPlayerGamesWon++;
                }
                else if (firstPlayerScore == secondPlayerScore)
                {
                    firstPlayerScore = 0;
                    secondPlayerScore = 0;
                }
                }
                firstPlayerOverall += firstPlayerScore;
                secondPlayerOverall += secondPlayerScore;
                firstPlayerScore = 0;
                secondPlayerScore = 0;
                count += 3;
            }
            if (firstPlayerOverall == secondPlayerOverall)
            {
                Console.WriteLine("It's a tie!");
                Console.WriteLine("Score: " + (firstPlayerOverall + secondPlayerOverall) / 2);
            }
            else if (firstPlayerOverall > secondPlayerOverall)
            {
                Console.WriteLine("First player wins!");
                Console.WriteLine("Score: " + firstPlayerOverall);
                Console.WriteLine("Games won: " + firstPlayerGamesWon);
            }
            else
            {
                Console.WriteLine("Second player wins!");
                Console.WriteLine("Score: " + secondPlayerOverall);
                Console.WriteLine("Games won: " + secondPlayerGamesWon);
            }
        Finish:
            ;
        }
    }
}
